import type { Express } from "express";
import express from "express";
import { createServer, type Server } from "http";
import multer from "multer";
import path from "path";
import fs from "fs";
import { firebaseService } from "./firebaseService";
import { simpleStorage } from "./simpleStorage";
import { 
  insertUserSchema, 
  insertCategorySchema, 
  insertProductSchema, 
  insertCustomerSchema, 
  insertOrderSchema,
  insertOrderItemSchema,
  type User
} from "@shared/schema";
import { z } from "zod";

const loginSchema = z.object({
  phoneOrEmail: z.string().min(1),
  password: z.string().min(1),
});

export async function registerRoutes(app: Express): Promise<Server> {
  // تقديم الملفات الثابتة من مجلد uploads
  const uploadsDir = path.join(process.cwd(), 'uploads');
  if (!fs.existsSync(uploadsDir)) {
    fs.mkdirSync(uploadsDir, { recursive: true });
  }
  app.use('/uploads', express.static(uploadsDir));

  // إعداد multer لرفع الصور
  const storage_multer = multer.diskStorage({
    destination: (req, file, cb) => {
      cb(null, uploadsDir);
    },
    filename: (req, file, cb) => {
      const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
      cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));
    }
  });

  const upload = multer({ 
    storage: storage_multer,
    limits: {
      fileSize: 5 * 1024 * 1024 // 5MB
    },
    fileFilter: (req, file, cb) => {
      const allowedTypes = /jpeg|jpg|png|gif/;
      const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());
      const mimetype = allowedTypes.test(file.mimetype);
      
      if (mimetype && extname) {
        return cb(null, true);
      } else {
        cb(new Error('يُسمح فقط بملفات الصور (jpeg, jpg, png, gif)'));
      }
    }
  });

  // تقديم الصور المرفوعة
  app.use('/uploads', express.static(uploadsDir));
  
  // Add logging for all requests
  app.use('/api/auth/*', (req, res, next) => {
    console.log(`طلب ${req.method} إلى ${req.path}`);
    console.log('البيانات:', req.body);
    next();
  });
  
  // رفع الصور
  app.post('/api/upload', upload.single('image'), (req, res) => {
    try {
      if (!req.file) {
        return res.status(400).json({ message: 'لم يتم رفع أي ملف' });
      }
      
      const imageUrl = `/uploads/${req.file.filename}`;
      res.json({ 
        message: 'تم رفع الصورة بنجاح',
        url: imageUrl,
        filename: req.file.filename
      });
    } catch (error) {
      console.error('خطأ في رفع الصورة:', error);
      res.status(500).json({ message: 'خطأ في رفع الصورة' });
    }
  });

  // Test route first
  app.post("/api/auth/test", (req, res) => {
    console.log("=== TEST ROUTE WORKING ===");
    res.json({ success: true });
  });

  // Login route with real user data
  app.post("/api/auth/login", async (req, res) => {
    console.log("=== وصل طلب تسجيل الدخول ===");
    console.log("البيانات المستلمة:", req.body);
    
    const { phoneOrEmail, password } = req.body;
    
    if (!phoneOrEmail || !password) {
      console.log("بيانات مفقودة");
      return res.status(400).json({ message: "رقم الهاتف وكلمة المرور مطلوبان" });
    }
    
    try {
      // تسجيل دخول للحساب الإداري المحدد
      if (phoneOrEmail === 'ggkipogo@gmail.com' && password === 'salah5') {
        console.log("تسجيل دخول مدير");
        
        // التحقق من وجود المدير في قاعدة البيانات
        try {
          let adminUser = await firebaseService.getUserByPhone('+966500000001');
          if (!adminUser) {
            // إنشاء المستخدم المدير إذا لم يكن موجوداً
            adminUser = await firebaseService.createUser({
              phone: '+966500000001',
              email: 'ggkipogo@gmail.com',
              fullName: 'المدير العام',
              role: 'admin',
              password: 'salah5'
            });
            console.log("تم إنشاء حساب المدير في قاعدة البيانات");
          }
          
          return res.json({ 
            user: { 
              id: adminUser.id, 
              phone: adminUser.phone,
              email: adminUser.email,
              fullName: adminUser.fullName,
              role: adminUser.role
            } 
          });
        } catch (error) {
          console.log("خطأ في إنشاء المدير:", error);
          // في حالة الخطأ، إرجاع البيانات المؤقتة
          return res.json({ 
            user: { 
              id: 1, 
              phone: '+966500000001',
              email: 'ggkipogo@gmail.com',
              fullName: 'المدير العام',
              role: 'admin'
            } 
          });
        }
      }

      // محاولة الوصول إلى Firebase
      let allUsers = [];
      try {
        allUsers = await firebaseService.getUsers();
        console.log("تم الوصول إلى Firebase بنجاح");
      } catch (dbError) {
        console.log("تعذر الوصول إلى Firebase، استخدام الحساب المؤقت");
        if (phoneOrEmail === 'ggkipogo@gmail.com' && password === 'salah5') {
          return res.json({ 
            user: { 
              id: 1, 
              phone: '+966500000001',
              email: 'ggkipogo@gmail.com',
              fullName: 'المدير العام',
              role: 'admin'
            } 
          });
        }
        return res.status(401).json({ message: "بيانات تسجيل الدخول غير صحيحة" });
      }
      
      // البحث بالهاتف أولاً
      console.log("البحث برقم الهاتف:", phoneOrEmail);
      let user = await firebaseService.getUserByPhone(phoneOrEmail);
      
      if (!user) {
        // البحث بالبريد الإلكتروني
        console.log("البحث بالبريد الإلكتروني");
        user = allUsers.find((u: User) => u.email === phoneOrEmail);
        console.log("نتيجة البحث بالبريد:", user ? "وُجد" : "لم يوجد");
      }
      
      if (!user) {
        console.log("لم يتم العثور على المستخدم");
        return res.status(401).json({ message: "بيانات تسجيل الدخول غير صحيحة" });
      }
      
      if (user.password !== password) {
        console.log("كلمة المرور غير صحيحة");
        return res.status(401).json({ message: "بيانات تسجيل الدخول غير صحيحة" });
      }
      
      console.log("تسجيل دخول ناجح للمستخدم:", user.phone, "الدور:", user.role);
      
      res.json({ 
        user: { 
          id: user.id, 
          phone: user.phone,
          email: user.email,
          fullName: user.fullName,
          role: user.role 
        } 
      });
    } catch (error: any) {
      console.log("خطأ في تسجيل الدخول:", error.message);
      res.status(500).json({ message: "خطأ في الخادم" });
    }
  });

  // Registration route
  app.post("/api/auth/register", async (req, res) => {
    try {
      const userData = insertUserSchema.parse(req.body);
      
      // التحقق من عدم وجود مستخدم بنفس رقم الهاتف
      const existingUserByPhone = await firebaseService.getUserByPhone(userData.phone);
      if (existingUserByPhone) {
        return res.status(400).json({ message: "رقم الهاتف مستخدم بالفعل" });
      }
      
      // التحقق من عدم وجود مستخدم بنفس البريد الإلكتروني (إذا تم إدخاله)
      if (userData.email) {
        const users = await firebaseService.getUsers();
        const existingUserByEmail = users.find((u: User) => u.email === userData.email);
        if (existingUserByEmail) {
          return res.status(400).json({ message: "البريد الإلكتروني مستخدم بالفعل" });
        }
      }
      
      // إنشاء المستخدم الجديد
      const user = await firebaseService.createUser(userData);
      
      res.status(201).json({ 
        message: "تم إنشاء الحساب بنجاح",
        user: { 
          id: user.id, 
          phone: user.phone,
          email: user.email,
          fullName: user.fullName,
          role: user.role 
        } 
      });
    } catch (error) {
      res.status(400).json({ message: "بيانات غير صحيحة" });
    }
  });

  // Users routes
  app.get("/api/users", async (req, res) => {
    try {
      const users = await firebaseService.getUsers();
      res.json(users);
    } catch (error) {
      console.log("خطأ في جلب المستخدمين:", error);
      res.status(500).json({ message: "خطأ في جلب المستخدمين" });
    }
  });

  // Categories routes
  app.get("/api/categories", async (req, res) => {
    try {
      const categories = await firebaseService.getCategories();
      res.json(categories);
    } catch (error) {
      res.status(500).json({ message: "خطأ في جلب الفئات" });
    }
  });

  app.post("/api/categories", async (req, res) => {
    try {
      const categoryData = insertCategorySchema.parse(req.body);
      const category = await firebaseService.createCategory(categoryData);
      res.status(201).json(category);
    } catch (error) {
      res.status(400).json({ message: "بيانات الفئة غير صحيحة" });
    }
  });

  app.put("/api/categories/:id", async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const categoryData = insertCategorySchema.partial().parse(req.body);
      const category = await firebaseService.updateCategory(id, categoryData);
      
      if (!category) {
        return res.status(404).json({ message: "الفئة غير موجودة" });
      }
      
      res.json(category);
    } catch (error) {
      res.status(400).json({ message: "بيانات الفئة غير صحيحة" });
    }
  });

  app.delete("/api/categories/:id", async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const deleted = await firebaseService.deleteCategory(id);
      
      if (!deleted) {
        return res.status(404).json({ message: "الفئة غير موجودة" });
      }
      
      res.json({ message: "تم حذف الفئة بنجاح" });
    } catch (error) {
      res.status(500).json({ message: "خطأ في حذف الفئة" });
    }
  });

  // Products routes
  app.get("/api/products", async (req, res) => {
    try {
      const products = await firebaseService.getProducts();
      res.json(products);
    } catch (error) {
      res.status(500).json({ message: "خطأ في جلب المنتجات" });
    }
  });

  app.get("/api/products/:id", async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      console.log("طلب جلب المنتج رقم:", id);
      
      // جلب من النظام البسيط أولاً
      let product = await simpleStorage.getProduct(id);
      
      // إذا لم يوجد، جرب Firebase بالبحث المباشر
      if (!product) {
        try {
          const { doc, getDoc } = await import('firebase/firestore');
          const { db } = await import('./firebaseConfig');
          const productRef = doc(db, 'products', id.toString());
          const docSnap = await getDoc(productRef);
          
          if (docSnap.exists()) {
            const data = docSnap.data();
            console.log(`✅ وجد المنتج في Firebase: ${data.name}`);
            
            // إنشاء كائن منتج من بيانات Firebase
            product = {
              id: id,
              name: data.name,
              description: data.description || '',
              price: parseFloat(data.price) || 0,
              stock: data.stock || 0,
              imageUrl: data.imageUrl || '',
              categoryId: data.categoryId || 1,
              createdAt: data.createdAt?.toDate() || new Date(),
              updatedAt: data.updatedAt?.toDate() || new Date()
            };
            
            // حفظ في النظام المحلي للمرات القادمة
            await simpleStorage.createProduct(product);
          }
        } catch (firebaseError) {
          console.log('خطأ في البحث المباشر في Firebase:', firebaseError);
        }
      }
      
      if (!product) {
        console.log("المنتج غير موجود:", id);
        return res.status(404).json({ message: "المنتج غير موجود" });
      }
      
      console.log("✅ تم جلب المنتج بنجاح:", product.name);
      
      // إضافة headers لمنع الـ cache
      res.set({
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
      });
      
      // تحويل البيانات للصيغة المطلوبة
      const responseProduct = {
        id: product.id,
        name: product.name,
        description: product.description,
        price: product.price.toString(),
        stock: product.stock,
        imageUrl: product.imageUrl,
        categoryId: product.categoryId,
        createdAt: product.createdAt,
        updatedAt: product.updatedAt
      };
      
      res.json(responseProduct);
    } catch (error) {
      console.log("خطأ في جلب المنتج:", error);
      res.status(500).json({ message: "خطأ في جلب المنتج" });
    }
  });

  app.post("/api/products", async (req, res) => {
    try {
      console.log("البيانات المرسلة:", req.body);
      
      // تحضير البيانات للإدراج مع الحقول الجديدة
      const productData: any = {
        name: req.body.name.trim(),
        description: req.body.description ? req.body.description.trim() : null,
        wholesalePrice: req.body.wholesalePrice ? parseFloat(req.body.wholesalePrice) : null,
        minPrice: req.body.minPrice ? parseFloat(req.body.minPrice) : null,
        maxPrice: req.body.maxPrice ? parseFloat(req.body.maxPrice) : null,
        stock: parseInt(req.body.stock),
        categoryId: parseInt(req.body.categoryId),
        imageUrl: req.body.imageUrl || null,
        status: 'active'
      };
      
      console.log("البيانات النظيفة للإدراج:", productData);
      const product = await firebaseService.createProduct(productData);
      res.status(201).json(product);
    } catch (error) {
      console.log("خطأ في إضافة المنتج:", error);
      res.status(400).json({ message: "بيانات المنتج غير صحيحة" });
    }
  });

  // إنشاء منتج جديد
  app.post("/api/products/create", async (req, res) => {
    try {
      const { name, description, price, stock, imageUrl, categoryId, colors, sku, status } = req.body;
      console.log('🆕 إنشاء منتج جديد:', name);
      
      // إنشاء المنتج في Firebase مباشرة
      const firebaseProduct = await firebaseService.createProduct({
        name,
        description,
        price,
        stock,
        imageUrl,
        categoryId: categoryId || 1,
        colors: colors || ['أبيض'],
        sku: sku || `SKU-${Date.now()}`,
        status: status || 'active',
        minPrice: Math.round(price * 1.1),
        maxPrice: Math.round(price * 1.5)
      });
      
      console.log(`✅ تم إنشاء المنتج بنجاح: ${firebaseProduct.name}`);
      res.json(firebaseProduct);
    } catch (error) {
      console.error('خطأ في إنشاء المنتج:', error);
      res.status(500).json({ message: "خطأ في إنشاء المنتج" });
    }
  });

  // جلب منتج واحد
  app.get("/api/products/:id", async (req, res) => {
    try {
      const productId = parseInt(req.params.id);
      console.log(`طلب جلب المنتج رقم: ${productId}`);
      
      const product = await firebaseService.getProduct(productId);
      
      if (!product) {
        console.log(`❌ المنتج ${productId} غير موجود`);
        return res.status(404).json({ message: "المنتج غير موجود" });
      }
      
      console.log(`✅ تم العثور على المنتج: ${product.name}`);
      res.json(product);
    } catch (error) {
      console.error('خطأ في جلب المنتج:', error);
      res.status(500).json({ message: "خطأ في جلب المنتج" });
    }
  });

  // تحديث منتج
  app.put("/api/products/:id", async (req, res) => {
    try {
      const productId = parseInt(req.params.id);
      const { name, description, price, stock, imageUrl } = req.body;
      
      console.log(`🔄 تحديث المنتج ${productId}:`, name);
      
      const updatedProduct = await firebaseService.updateProduct(productId, {
        name,
        description,
        price,
        stock,
        imageUrl,
        minPrice: Math.round(price * 1.1),
        maxPrice: Math.round(price * 1.5)
      });
      
      if (!updatedProduct) {
        return res.status(404).json({ message: "المنتج غير موجود" });
      }
      
      console.log(`✅ تم تحديث المنتج بنجاح: ${updatedProduct.name}`);
      res.json(updatedProduct);
    } catch (error) {
      console.error('خطأ في تحديث المنتج:', error);
      res.status(500).json({ message: "خطأ في تحديث المنتج" });
    }
  });

  // حذف منتج
  app.delete("/api/products/:id", async (req, res) => {
    try {
      const productId = parseInt(req.params.id);
      
      console.log(`🗑️ حذف المنتج ${productId}`);
      
      const success = await firebaseService.deleteProduct(productId);
      
      if (!success) {
        return res.status(404).json({ message: "المنتج غير موجود" });
      }
      
      console.log(`✅ تم حذف المنتج بنجاح`);
      res.json({ message: "تم حذف المنتج بنجاح" });
    } catch (error) {
      console.error('خطأ في حذف المنتج:', error);
      res.status(500).json({ message: "خطأ في حذف المنتج" });
    }
  });

  // تحديث مخزون المنتج فقط
  app.put("/api/products/:id/stock", async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      console.log('🔄 تحديث مخزون المنتج رقم:', id);
      
      const updatedProduct = await firebaseService.updateProductStock(id, req.body.stock);
      
      if (!updatedProduct) {
        return res.status(404).json({ message: "المنتج غير موجود" });
      }
      
      console.log('✅ تم تحديث المخزون بنجاح');
      res.json(updatedProduct);
    } catch (error) {
      console.error('خطأ في تحديث المخزون:', error);
      res.status(500).json({ message: "خطأ في تحديث المخزون" });
    }
  });



  // Customers routes
  app.get("/api/customers", async (req, res) => {
    try {
      const customers = await firebaseService.getCustomers();
      res.json(customers);
    } catch (error) {
      res.status(500).json({ message: "خطأ في جلب العملاء" });
    }
  });

  app.post("/api/customers", async (req, res) => {
    try {
      const customerData = insertCustomerSchema.parse(req.body);
      const customer = await firebaseService.createCustomer(customerData);
      res.status(201).json(customer);
    } catch (error) {
      res.status(400).json({ message: "بيانات العميل غير صحيحة" });
    }
  });

  // Product Pages routes
  app.get("/api/product-pages/:id", async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      // إرجاع إعدادات افتراضية للمنتج
      const defaultSettings = {
        productId: id,
        settings: {
          showDescription: true,
          showPrice: true,
          showStock: true,
          showCategory: true,
          showImages: true,
          layout: 'default',
          primaryColor: '#8B5CF6',
          backgroundColor: '#FFFFFF',
          customCSS: '',
          seoTitle: '',
          seoDescription: '',
          showReviews: false,
          showRelatedProducts: true,
        },
        customSections: [],
        imageGallery: [],
        updatedAt: new Date().toISOString(),
      };
      res.json(defaultSettings);
    } catch (error) {
      res.status(500).json({ message: "خطأ في جلب إعدادات الصفحة" });
    }
  });

  app.put("/api/product-pages/:id", async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      // حفظ الإعدادات في Firebase
      console.log("حفظ إعدادات صفحة المنتج:", id, req.body);
      res.json({ message: "تم حفظ الإعدادات بنجاح", data: req.body });
    } catch (error) {
      res.status(500).json({ message: "خطأ في حفظ إعدادات الصفحة" });
    }
  });

  // تحديث المنتج
  app.put("/api/products/:id", async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const productData = req.body;
      
      console.log("تحديث المنتج:", id, productData);
      
      // تحديث المنتج في التخزين
      const updatedProduct = await firebaseService.updateProduct(id, {
        name: productData.name,
        description: productData.description,
        price: productData.price,
        stock: productData.stock,
        sku: productData.sku,
        imageUrl: productData.imageUrl,
        categoryId: productData.categoryId ? parseInt(productData.categoryId) : undefined
      });

      if (updatedProduct) {
        console.log("تم تحديث المنتج بنجاح:", updatedProduct);
        res.json(updatedProduct);
      } else {
        res.status(404).json({ message: "المنتج غير موجود" });
      }
    } catch (error) {
      console.error("خطأ في تحديث المنتج:", error);
      res.status(500).json({ message: "خطأ في تحديث المنتج" });
    }
  });

  // Orders routes
  app.get("/api/orders", async (req, res) => {
    try {
      const orders = await firebaseService.getOrders();
      res.json(orders);
    } catch (error) {
      res.status(500).json({ message: "خطأ في جلب الطلبات" });
    }
  });

  app.get("/api/orders/:id", async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const order = await firebaseService.getOrder(id);
      
      if (!order) {
        return res.status(404).json({ message: "الطلب غير موجود" });
      }
      
      res.json(order);
    } catch (error) {
      res.status(500).json({ message: "خطأ في جلب الطلب" });
    }
  });

  app.post("/api/orders", async (req, res) => {
    try {
      console.log('البيانات المرسلة للطلب:', req.body);
      
      const { customerInfo, items, customerPrice, deliveryFee, totalWithDelivery, wholesaleTotal, profit, totalItems, orderDate } = req.body;
      
      // التحقق من وجود البيانات الأساسية
      if (!customerInfo || !items || !totalWithDelivery) {
        return res.status(400).json({ message: "بيانات الطلب غير صحيحة" });
      }
      
      // إنشاء طلب جديد بتفاصيل الزبون
      const orderData = {
        customerId: null,
        total: totalWithDelivery.toString(),
        status: 'pending',
        customerDetails: {
          name: customerInfo.name,
          phone: customerInfo.phone,
          governorate: customerInfo.governorate,
          area: customerInfo.area,
          address: customerInfo.address,
          notes: customerInfo.notes
        },
        items: items,
        customerPrice: customerPrice || 0,
        deliveryFee: deliveryFee || 0,
        totalWithDelivery: totalWithDelivery,
        wholesaleTotal: wholesaleTotal || 0,
        profit: profit || 0,
        totalItems: totalItems || items.length,
        orderDate: orderDate || new Date().toISOString()
      };

      console.log('حفظ طلب جديد:', orderData);
      
      const order = await firebaseService.createOrder(orderData);
      console.log('تم حفظ الطلب بنجاح:', order);
      
      res.status(201).json({ 
        message: "تم إنشاء الطلب بنجاح", 
        order: order 
      });
    } catch (error) {
      console.error('خطأ في حفظ الطلب:', error);
      res.status(400).json({ message: "بيانات الطلب غير صحيحة" });
    }
  });

  app.put("/api/orders/:id/status", async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const { status } = z.object({ status: z.string() }).parse(req.body);
      
      const order = await firebaseService.updateOrderStatus(id, status);
      
      if (!order) {
        return res.status(404).json({ message: "الطلب غير موجود" });
      }
      
      res.json(order);
    } catch (error) {
      res.status(400).json({ message: "بيانات غير صحيحة" });
    }
  });

  // Analytics routes
  app.get("/api/stats", async (req, res) => {
    try {
      const stats = await firebaseService.getStats();
      res.json(stats);
    } catch (error) {
      res.status(500).json({ message: "خطأ في جلب الإحصائيات" });
    }
  });

  // Download analytics route
  app.post("/api/analytics/download", async (req, res) => {
    try {
      const { productId, productName, action, timestamp } = req.body;
      
      // حفظ بيانات التحميل في Firebase (يمكن إضافة تفاصيل أكثر لاحقاً)
      console.log('تسجيل عملية تحميل:', {
        productId,
        productName,
        action,
        timestamp
      });
      
      res.json({ message: "تم تسجيل عملية التحميل بنجاح" });
    } catch (error) {
      res.status(500).json({ message: "خطأ في تسجيل عملية التحميل" });
    }
  });

  // Saved products routes
  app.get("/api/saved-products", async (req, res) => {
    try {
      const savedProducts = await firebaseService.getSavedProducts();
      res.json(savedProducts);
    } catch (error) {
      res.status(500).json({ message: "خطأ في جلب المنتجات المحفوظة" });
    }
  });

  app.post("/api/saved-products", async (req, res) => {
    try {
      const { productId } = req.body;
      console.log('طلب حفظ منتج:', { productId });
      
      if (!productId) {
        return res.status(400).json({ message: "معرف المنتج مطلوب" });
      }

      // إضافة المنتج للمحفوظات
      const savedProduct = await firebaseService.addToSavedProducts(productId);
      console.log('تم حفظ المنتج بنجاح:', savedProduct);
      res.json(savedProduct);
    } catch (error) {
      console.error('خطأ في حفظ المنتج:', error);
      res.status(500).json({ message: "خطأ في حفظ المنتج" });
    }
  });

  app.delete("/api/saved-products/:productId", async (req, res) => {
    try {
      const productId = parseInt(req.params.productId);
      await firebaseService.removeFromSavedProducts(productId);
      res.json({ message: "تم إزالة المنتج من المحفوظات" });
    } catch (error) {
      res.status(500).json({ message: "خطأ في إزالة المنتج من المحفوظات" });
    }
  });

  // Cart routes - using Firebase
  app.get("/api/cart", async (req, res) => {
    try {
      // جلب عناصر السلة من Firebase
      const cartItems = await firebaseService.getCartItems();
      res.json(cartItems);
    } catch (error) {
      res.status(500).json({ message: "خطأ في جلب السلة" });
    }
  });

  app.post("/api/cart", async (req, res) => {
    try {
      const { productId, quantity = 1 } = req.body;
      
      if (!productId) {
        return res.status(400).json({ message: "معرف المنتج مطلوب" });
      }

      // إضافة أو تحديث المنتج في السلة
      const cartItem = await firebaseService.addToCart(productId, quantity);
      res.json(cartItem);
    } catch (error) {
      res.status(500).json({ message: "خطأ في إضافة المنتج إلى السلة" });
    }
  });

  app.delete("/api/cart/:productId", async (req, res) => {
    try {
      const productId = parseInt(req.params.productId);
      await firebaseService.removeFromCart(productId);
      res.json({ message: "تم حذف المنتج من السلة" });
    } catch (error) {
      res.status(500).json({ message: "خطأ في حذف المنتج من السلة" });
    }
  });

  // حذف جميع المنتجات من السلة
  app.delete("/api/cart", async (req, res) => {
    try {
      // جلب جميع العناصر في السلة
      const cartItems = await firebaseService.getCartItems();
      
      // حذف كل منتج
      for (const item of cartItems) {
        await firebaseService.removeFromCart(item.productId);
      }
      
      res.json({ message: "تم حذف جميع المنتجات من السلة" });
    } catch (error) {
      res.status(500).json({ message: "خطأ في حذف جميع المنتجات من السلة" });
    }
  });

  app.put("/api/cart/:productId", async (req, res) => {
    try {
      const productId = parseInt(req.params.productId);
      const { quantity } = req.body;
      
      const cartItem = await firebaseService.updateCartQuantity(productId, quantity);
      res.json(cartItem);
    } catch (error) {
      res.status(500).json({ message: "خطأ في تحديث كمية المنتج" });
    }
  });

  // Save cart data with customer pricing
  app.post("/api/cart/save", async (req, res) => {
    try {
      const { customerPrice, discount, items } = req.body;
      
      const wholesaleTotal = items.reduce((total: number, item: any) => 
        total + (parseFloat(item.product.price) * item.quantity), 0);
      
      const profit = customerPrice - wholesaleTotal;
      const finalProfit = profit < 0 ? 0 : profit;
      
      const cartData = {
        items,
        customerPrice: customerPrice || 0,
        discount: discount || 0,
        wholesaleTotal,
        profit: finalProfit,
        totalPrice: customerPrice || 0,
        updatedAt: new Date().toISOString()
      };

      console.log('حفظ بيانات السلة:', cartData);
      
      res.json({ 
        message: "تم حفظ بيانات السلة بنجاح", 
        data: cartData 
      });
    } catch (error: any) {
      console.error('خطأ في حفظ بيانات السلة:', error);
      res.status(500).json({ message: "خطأ في حفظ بيانات السلة: " + error.message });
    }
  });

  // File upload endpoint for general use
  app.post("/api/upload", async (req, res) => {
    try {
      const mockUrl = "https://via.placeholder.com/300x300?text=Product+Image";
      res.json({ url: mockUrl });
    } catch (error) {
      res.status(500).json({ message: "خطأ في رفع الملف" });
    }
  });

  // Image upload endpoint for banners
  app.post("/api/upload-image", upload.single('image'), async (req, res) => {
    try {
      if (!req.file) {
        return res.status(400).json({ message: "لم يتم رفع أي صورة" });
      }
      
      const imageUrl = `/uploads/${req.file.filename}`;
      res.json({ url: imageUrl });
    } catch (error) {
      console.error('خطأ في رفع الصورة:', error);
      res.status(500).json({ message: "خطأ في رفع الصورة" });
    }
  });

  // ==================== BANNERS ROUTES ====================
  
  // مصفوفة لحفظ البانرات مؤقتاً في الذاكرة
  let tempBanners: any[] = [];

  // مسح جميع البانرات من Firebase (لإعادة البدء)
  app.delete("/api/banners/clear-all", async (req, res) => {
    try {
      // مسح البانرات من Firebase
      const existingBanners = await firebaseService.getBanners();
      for (const banner of existingBanners) {
        await firebaseService.deleteBanner(banner.id);
      }
      
      // مسح البانرات المؤقتة
      tempBanners = [];
      
      console.log('✅ تم مسح جميع البانرات بنجاح');
      res.json({ message: "تم مسح جميع البانرات بنجاح" });
    } catch (error) {
      console.error('خطأ في مسح البانرات:', error);
      res.status(500).json({ message: "خطأ في مسح البانرات" });
    }
  });
  
  // جلب جميع البانرات - نظام جديد
  app.get("/api/banners", async (req, res) => {
    try {
      // جلب البانرات من المخزن المؤقت فقط (بداية جديدة)
      console.log('إرجاع البانرات الجديدة:', tempBanners.length);
      res.json(tempBanners);
    } catch (error) {
      console.log('إرجاع قائمة فارغة');
      res.json([]);
    }
  });

  // إضافة بانر جديد
  app.post("/api/banners", async (req, res) => {
    try {
      const { title, description, isActive, imageUrl } = req.body;
      
      // التحقق من وجود العنوان
      if (!title || title.trim() === '') {
        return res.status(400).json({ message: "عنوان البانر مطلوب" });
      }
      
      // إنشاء بانر جديد مؤقت (سيتم ربطه بـ Firebase لاحقاً)
      const bannerData = {
        id: Date.now().toString(),
        title: title.trim(),
        description: description ? description.trim() : '',
        isActive: isActive === 'true' || isActive === true || isActive,
        imageUrl: imageUrl || '',
        createdAt: new Date()
      };

      // الآن نحفظ في Firebase مباشرة مع نظام بانرات جديد
      try {
        const firebaseBanner = await firebaseService.createBanner(bannerData);
        console.log('✅ تم إنشاء بانر جديد في Firebase:', firebaseBanner);
        res.status(201).json(firebaseBanner);
      } catch (firebaseError) {
        console.log('⚠️ فشل في Firebase، حفظ مؤقت:', firebaseError);
        tempBanners.push(bannerData);
        console.log('عدد البانرات المؤقتة:', tempBanners.length);
        res.status(201).json(bannerData);
      }
    } catch (error: any) {
      console.error('خطأ في إضافة البانر:', error);
      res.status(500).json({ 
        message: "عذراً، حدث خطأ أثناء إضافة البانر. يرجى المحاولة مرة أخرى",
        error: process.env.NODE_ENV === 'development' ? error.message : undefined
      });
    }
  });

  // تحديث بانر
  app.put("/api/banners/:id", upload.single('image'), async (req, res) => {
    try {
      const id = req.params.id; // استخدام string ID مباشرة
      const { title, description, isActive } = req.body;

      const updateData: any = {
        title,
        description: description || null,
        isActive: isActive === 'true' || isActive === true,
      };

      if (req.file) {
        updateData.imageUrl = `/uploads/${req.file.filename}`;
      }

      try {
        // محاولة تحديث البانر في Firebase أولاً
        const updatedBanner = await firebaseService.updateBanner(id, updateData);
        console.log('✅ تم تحديث البانر في Firebase:', updatedBanner);
        res.status(200).json(updatedBanner);
      } catch (firebaseError) {
        // في حالة فشل Firebase، البحث في المخزن المؤقت
        const bannerIndex = tempBanners.findIndex(b => b.id === req.params.id);
        if (bannerIndex !== -1) {
          tempBanners[bannerIndex] = {
            ...tempBanners[bannerIndex],
            title: updateData.title,
            description: updateData.description || '',
            imageUrl: updateData.imageUrl || tempBanners[bannerIndex].imageUrl,
            isActive: updateData.isActive,
            updatedAt: new Date()
          };
          
          console.log('✅ تم تحديث البانر مؤقتاً:', tempBanners[bannerIndex]);
          res.status(200).json(tempBanners[bannerIndex]);
        } else {
          res.status(404).json({ message: "البانر غير موجود" });
        }
      }
    } catch (error) {
      console.error('خطأ في تحديث البانر:', error);
      res.status(500).json({ message: "خطأ في تحديث البانر" });
    }
  });

  // تغيير حالة البانر (نشط/غير نشط)
  app.put("/api/banners/:id/toggle", async (req, res) => {
    try {
      const id = req.params.id;
      const { isActive } = req.body;

      // البحث عن البانر في المصفوفة المؤقتة وتحديث حالته
      const bannerIndex = tempBanners.findIndex(b => b.id === id);
      if (bannerIndex !== -1) {
        tempBanners[bannerIndex].isActive = isActive;
        tempBanners[bannerIndex].updatedAt = new Date();
        
        console.log('تم تغيير حالة البانر بنجاح:', tempBanners[bannerIndex]);
        res.json(tempBanners[bannerIndex]);
      } else {
        res.status(404).json({ message: "البانر غير موجود" });
      }
    } catch (error) {
      console.error('خطأ في تغيير حالة البانر:', error);
      res.status(500).json({ message: "خطأ في تغيير حالة البانر" });
    }
  });

  // حذف بانر
  app.delete("/api/banners/:id", async (req, res) => {
    try {
      const id = req.params.id;
      
      try {
        // محاولة حذف البانر من Firebase أولاً
        const deleted = await firebaseService.deleteBanner(id);
        if (deleted) {
          console.log('تم حذف البانر من Firebase بنجاح');
          res.json({ message: "تم حذف البانر بنجاح" });
        } else {
          res.status(404).json({ message: "البانر غير موجود" });
        }
      } catch (firebaseError) {
        // في حالة فشل Firebase، البحث في المخزن المؤقت
        const bannerIndex = tempBanners.findIndex(b => b.id === id);
        if (bannerIndex !== -1) {
          const deletedBanner = tempBanners.splice(bannerIndex, 1)[0];
          console.log('تم حذف البانر مؤقتاً:', deletedBanner.title);
          console.log('عدد البانرات المتبقية:', tempBanners.length);
          res.json({ message: "تم حذف البانر بنجاح" });
        } else {
          res.status(404).json({ message: "البانر غير موجود" });
        }
      }
    } catch (error) {
      console.error('خطأ في حذف البانر:', error);
      res.status(500).json({ message: "خطأ في حذف البانر" });
    }
  });

  const httpServer = createServer(app);
  return httpServer;
}
